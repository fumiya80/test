AWSTemplateFormatVersion: 2010-09-09
Description: lecture10-vpc-template



Parameters:
# vpc----------------------------------------------------------------------
  VpcCidrBlock:
    Description: Input a VPC IPv4 CidrBlock. # ex 192.168.2.0/16
    Type: String
    Default: "10.0.0.0/16"
  VpcName:
    Description: Input a VPC name. This Parameter will be a Name tag.
    Type: String
    Default: "RaiseTech-VPC"

  # igw----------------------------------------------------------------------
  InternetGwName:
    Description: Input a IntenetGW name. This Parameter will be a Name tag.
    Type: String
    Default: "RaiseTech-IGW"
  #publicsubnet-------------------------------------------------------------
  AZ1:
    Description: Input a AZ where Public Subnet will be created.
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-1a"
  PublicSubnet1CidrBlock:
    Description: Input a Public Subnet IPv4 CidrBlock.  #ex 192.168.2.0/25
    Type: String
    Default: "10.0.0.0/20"
  PublicSubnet1Name:
    Description: Input a Public Subnet name. This Parameter will be a Name tag.
    Type: String
    Default: "RaiseTech-PublicSubnet1"
    
  AZ2:
    Description: Input a AZ where Public Subnet will be created.
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-1c"
  PublicSubnet2CidrBlock:
    Description: Input a Public Subnet IPv4 CidrBlock.  #ex) 192.168.2.0/25
    Type: String
    Default: "10.0.8.0/20"
  PublicSubnet2Name:
    Description: Input a Public Subnet name. This Parameter will be a Name tag.
    Type: String
    Default: "RaiseTech-PublicSubnet2"
    
  #privatesubnet------------------------------------------------------------
  AZ3:
    Description: Input a AZ where Private Subnet will be created.
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-1a"
  PrivateSubnet1CidrBlock:
    Description: Input a Private Subnet IPv4 CidrBlock.  #ex) 192.168.2.0/25
    Type: String
    Default: "10.0.16.0/20"
  PrivateSubnet1Name:
    Description: Input a Private Subnet name. This Parameter will be a Name tag.
    Type: String
    Default: "RaiseTech-PrivateSubnet1"

  AZ4:
    Description: Input a AZ where Private Subnet will be created.
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-1c"
  PrivateSubnet2CidrBlock:
    Description: Input a Private Subnet IPv4 CidrBlock.  #ex) 192.168.2.0/25
    Type: String
    Default: "10.0.32.0/20"
  PrivateSubnet2Name:
    Description: Input a Private Subnet name. This Parameter will be a Name tag.
    Type: String
    Default: "RaiseTech-PrivateSubnet2"
  
  #PublicRouteTable------------------------------------------------------------
  PublicRouteTableName:
    Description: Input a RouteTable name. This Parameter will be a Name tag.
    Type: String
    Default: "RaiseTech-PublicRouteTable"


  #PrivateRouteTable------------------------------------------------------------
  PrivateRouteTable1Name:
    Description: Input a RouteTable name. This Parameter will be a Name tag.
    Type: String
    Default: "RaiseTech-PrivateRouteTable1"
    
  PrivateRouteTable2Name:
    Description: Input a RouteTable name. This Parameter will be a Name tag.
    Type: String
    Default: "RaiseTech-PrivateRouteTable2"
  
  
  
  
Resources:
  #vpc----------------------------------------------------------------------
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VpcName

  #igw----------------------------------------------------------------------
  MyInternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref InternetGwName
  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGW
      VpcId: !Ref MyVPC
      
  #publicsubnet-------------------------------------------------------------   
  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet1Name
      VpcId: !Ref MyVPC
      
  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref PublicSubnet2CidrBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet2Name
      VpcId: !Ref MyVPC
  
  #privatesubnet------------------------------------------------------------
  MyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ3
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnet1Name
      VpcId: !Ref MyVPC
      
  MyPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ4
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnet2Name
      VpcId: !Ref MyVPC

  #Publicroutetable------------------------------------------------------------
  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PublicRouteTableName
      VpcId: !Ref MyVPC

  MyPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGW
      RouteTableId: !Ref MyPublicRouteTable
      
  MyPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      SubnetId: !Ref MyPublicSubnet1
      
  MyPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      SubnetId: !Ref MyPublicSubnet2
      
  #Privateroutetable----------------------------------------------------------
  MyPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PrivateRouteTable1Name
      VpcId: !Ref MyVPC
      
  MyPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PrivateRouteTable2Name
      VpcId: !Ref MyVPC
  
  MyPrivateSubnet1RouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable1
      SubnetId: !Ref MyPrivateSubnet1
      
  MyPrivateSubnet2RouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable2
      SubnetId: !Ref MyPrivateSubnet2

Outputs:
 #Outputs-------------------------------------------------------------------
  MyVPC:
    Value: !Ref MyVPC
    Export:
      Name: !Ref VpcName
  
  MyPublicSubnet1:
   Value: !Ref MyPublicSubnet1
   Export:
     Name: !Ref PublicSubnet1Name

  MyPublicSubnet2:
   Value: !Ref MyPublicSubnet2
   Export:
     Name: !Ref PublicSubnet2Name

  MyPrivateSubnet1:
    Value: !Ref MyPrivateSubnet1
    Export:
      Name: !Ref PrivateSubnet1Name

  MyPrivateSubnet2:
    Value: !Ref MyPrivateSubnet2
    Export:
      Name: !Ref PrivateSubnet2Name

  PublicRouteTable:
    Value: !Ref MyPublicRouteTable
    Export:
      Name: !Ref PublicRouteTableName

  
