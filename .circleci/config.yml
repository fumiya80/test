version: 2.1

orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@4.1.2
  ansible: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@2.1.0

jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/*.yml

  cfn-execute:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
          name: deploy Cloudformation
          command: |
            aws cloudformation deploy --stack-name lecture13-vpc --template-file cloudformation/vpc.yml
            aws cloudformation deploy --stack-name lecture13-SG --template-file cloudformation/SG.yml --parameter-overrides MyIP="${AWS_MY_IP}"
            aws cloudformation deploy --stack-name lecture13-S3Accesslole --template-file cloudformation/S3Accesslole.yml --capabilities CAPABILITY_IAM
            aws cloudformation deploy --stack-name lecture13-EC2 --template-file cloudformation/EC2.yml
            aws cloudformation deploy --stack-name lecture13-RDS --template-file cloudformation/RDS.yml
            aws cloudformation deploy --stack-name lecture13-ALB --template-file cloudformation/ALB.yml
            aws cloudformation deploy --stack-name lecture13-S3 --template-file cloudformation/S3.yml
            aws cloudformation describe-stacks --stack-name lecture13-EC2 --query 'Stacks[].Outputs[1].OutputValue' --output text > /tmp/AWS_EC2_HOST.txt
            aws cloudformation describe-stacks --stack-name lecture13-ALB --query 'Stacks[].Outputs[1].OutputValue' --output text > /tmp/AWS_ALB_HOST.txt
            aws cloudformation describe-stacks --stack-name lecture13-RDS --query 'Stacks[].Outputs[1].OutputValue' --output text > /tmp/AWS_DB_HOST.txt
            aws cloudformation describe-stacks --stack-name lecture13-RDS --query 'Stacks[].Parameters[2].ParameterValue' --output text > /tmp/AWS_DB_USER.txt
            aws ssm get-parameters --query Parameters[].Value --output text --name RaiseTech-RDS-password1 --with-decryption > /tmp/AWS_DB_PW.txt
      - persist_to_workspace:
          root: /tmp
          paths: AWS*

  ansible-execute:
    executor: ansible/default
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: set-env-vars
          command: |
            echo "export AWS_EC2_HOST=$(cat /tmp/AWS_EC2_HOST.txt)" >> $BASH_ENV
            echo "export AWS_ALB_HOST=$(cat /tmp/AWS_ALB_HOST.txt)" >> $BASH_ENV
            echo "export AWS_DB_HOST=$(cat /tmp/AWS_DB_HOST.txt)" >> $BASH_ENV
            echo "export AWS_DB_USER=$(cat /tmp/AWS_DB_USER.txt)" >> $BASH_ENV
            echo "export AWS_DB_PW=$(cat /tmp/AWS_DB_PW.txt)" >> $BASH_ENV
#      - run:
#          name: set-sshkey
#          command: |
#            echo -e "Host server\n  HostName ${AWS_EC2_HOST}\n  User ec2-user\n  Port 22\n  IdentityFile ~/environment/.ssh/rsa_key.pem\n  StrictHostKeyChecking no" > ~/.ssh/config
      - ansible/install:
          version: 2.9.23
      - ansible/playbook:
          playbook: ansible/playbook.yml
          playbook-options: '-u ec2-user -i ansible/inventory --private-key ~/environment/.ssh/rsa_key.pem'
          playbook-options: "-i ansible/inventory"

  serverspec-execute:
    executor: ruby/default
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: set-env-vars
          command: |
            echo "export AWS_EC2_HOST=$(cat /tmp/AWS_EC2_HOST.txt)" >> $BASH_ENV
      - run:
          name: set-sshkey
          command: |
            echo -e "Host server\n  HostName ${AWS_EC2_HOST}\n  User ec2-user\n  Port 22\n  IdentityFile ~/.ssh/rsa_key\n  StrictHostKeyChecking no" > ~/.ssh/config
      - run:
          name: bundle install
          command: |
            cd serverspec
            gem list -e rails
            bundle install --path vendor/bundle
      - run:
          name: execute
          command: |
            cd serverspec
            bundle exec rake spec

workflows:
  raisetech:
    jobs:
      - cfn-lint
      - cfn-execute:
          requires:
            - cfn-lint
      - ansible-execute:
          requires:
            - cfn-execute
      - serverspec-execute:
          requires:
            - ansible-execute
